Index: layout.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from dash import html, dcc\r\n\r\ndef create_layout():\r\n    sans_serif_font = 'Arial, sans-serif'\r\n    radio_size = '16px'\r\n\r\n    input_style = {\r\n        'width': '97%',\r\n        'height': '1.2em',  # Set to text height\r\n        'font-family': sans_serif_font,  # Sans-serif font\r\n        'border': '1px solid #ccc',\r\n        'color': 'black',\r\n        'background-color': '#f7f7f7',\r\n        'padding': '5px',\r\n        'margin-bottom': '10px'\r\n    }\r\n\r\n    config = {\r\n        'toImageButtonOptions': {\r\n            'format': 'svg',\r\n            'filename': 'nmr_heatmap',\r\n            'height': 500,\r\n            'width': 700,\r\n            'scale': 1\r\n        }\r\n    }\r\n\r\n    return html.Div([\r\n        html.Div([\r\n            html.H1(\"AkkuSpin\", style={'text-align': 'center', 'padding': '20px 0', 'color': 'white', 'font-family': sans_serif_font}),\r\n        ], style={'background-color': '#0047AB', 'color': 'white', 'margin': '0', 'padding': '0'}),\r\n\r\n        # Interval component for live updates\r\n        dcc.Interval(\r\n            id='interval-component',\r\n            interval=200 * 1000,  # in milliseconds\r\n            n_intervals=0\r\n        ),\r\n\r\n        html.Div([\r\n            # Global Settings\r\n            html.Div([\r\n                html.H2(\"Global Settings\", style={'font-family': sans_serif_font, 'font-size': '18px', 'line-height': '1.5', 'padding': '10px', 'margin-top': '0'}),\r\n                html.Label(\"NMR Folder Path:\", style={'font-family': sans_serif_font, 'font-size': '16px'}),\r\n                dcc.Input(id='nmr_folder_input', type='text', placeholder='Enter NMR Folder Path',\r\n                          value=r'Test/NMR Folder', style=input_style),\r\n                html.Label(\"Voltage Folder Path:\", style={'font-family': sans_serif_font, 'font-size': '16px'}),\r\n                dcc.Input(id='voltage_folder_input', type='text', placeholder='Enter Voltage Folder Path',\r\n                          value=r'Test/Cyclerfolder', style=input_style),\r\n                html.Label(\"NMR Format:\", style={'font-family': sans_serif_font, 'font-size': '16px'}),\r\n                dcc.RadioItems(\r\n                    id='nmr_format_selector',\r\n                    options=[\r\n                        {'label': 'Bruker', 'value': 'Bruker'},\r\n                        {'label': 'Varian', 'value': 'Varian'}\r\n                    ],\r\n                    value='Varian',\r\n                    labelStyle={'display': 'block'},\r\n                    style={'font-family': sans_serif_font, 'font-size': radio_size}\r\n                ),\r\n                html.Label(\"Nucleus:\", style={'font-family': sans_serif_font, 'font-size': '16px'}),\r\n                dcc.RadioItems(\r\n                    id='nucleus_selector',\r\n                    options=[\r\n                        {'label': '1H', 'value': '1H'},\r\n                        {'label': '19F', 'value': '19F'}\r\n                    ],\r\n                    value='19F',\r\n                    labelStyle={'display': 'block'},\r\n                    style={'font-family': sans_serif_font, 'font-size': radio_size}\r\n                ),\r\n            ], style={'width': '32%', 'background-color': '#f7f7f7', 'padding': '20px', 'box-sizing': 'border-box',\r\n                      'margin-right': '2%'}),\r\n\r\n            # Update Settings\r\n            html.Div([\r\n                html.H2(\"Update Settings\", style={'font-family': sans_serif_font, 'font-size': '18px', 'line-height': '1.5', 'padding': '10px', 'margin-top': '0'}),\r\n                dcc.RadioItems(\r\n                    id='data_selector',\r\n                    options=[\r\n                        {'label': 'Live Data', 'value': 'live'},\r\n                        {'label': 'Historic Data', 'value': 'past'}\r\n                    ],\r\n                    value='live',\r\n                    labelStyle={'display': 'block'},\r\n                    style={'font-family': sans_serif_font, 'font-size': radio_size}\r\n                ),\r\n                html.Label(\"Live Time Window (hours):\", style={'font-family': sans_serif_font, 'font-size': '16px'}),\r\n                dcc.Input(id='live_time_window_input', type='number', placeholder='Enter Time Window', value=3,\r\n                          style=input_style),\r\n                html.Label(\"Historic Start DateTime (YYYY-MM-DD HH:MM):\", style={'font-family': sans_serif_font, 'font-size': '16px'}),\r\n                dcc.Input(id='past_start_datetime', type='text', placeholder='2023-11-18 05:00',\r\n                          style=input_style, value='2023-11-18 05:00'),\r\n                html.Label(\"Historic End DateTime (YYYY-MM-DD HH:MM):\", style={'font-family': sans_serif_font, 'font-size': '16px'}),\r\n                dcc.Input(id='past_end_datetime', type='text', placeholder='2023-11-18 09:00',\r\n                          value='2023-11-18 09:00', style=input_style),\r\n            ], style={'width': '32%', 'background-color': '#f7f7f7', 'padding': '20px', 'box-sizing': 'border-box',\r\n                      'margin-right': '2%'}),\r\n\r\n            # Plot Settings\r\n            html.Div([\r\n                html.H2(\"Plot Settings\", style={'font-family': sans_serif_font, 'font-size': '18px', 'line-height': '1.5', 'padding': '10px', 'margin-top': '0'}),\r\n                html.Label(\"Min PPM:\", style={'font-family': sans_serif_font, 'font-size': '16px'}),\r\n                dcc.Input(id='ppm_min_input', type='number', placeholder='Min PPM', value=-60,\r\n                          style=input_style),\r\n                html.Label(\"Max PPM:\", style={'font-family': sans_serif_font, 'font-size': '16px'}),\r\n                dcc.Input(id='ppm_max_input', type='number', placeholder='Max PPM', value=-51,\r\n                          style=input_style),\r\n                dcc.RadioItems(\r\n                    id='time_plot',\r\n                    options=[\r\n                        {'label': 'Timestamp', 'value': 'time'},\r\n                        {'label': 'Absolute time', 'value': 'abs'}\r\n                    ],\r\n                    value='time',\r\n                    labelStyle={'display': 'block'},\r\n                    style={'font-family': sans_serif_font, 'font-size': radio_size}\r\n                ),\r\n                html.Button('Update', id='update_button', n_clicks=0),\r\n            ], style={'width': '32%', 'background-color': '#f7f7f7', 'padding': '20px', 'box-sizing': 'border-box'}),\r\n        ], style={'display': 'flex', 'justify-content': 'space-between', 'margin-bottom': '20px'}),\r\n\r\n        #Message area\r\n        html.Div(\r\n            id='message_area',\r\n            style={'font-family': sans_serif_font, 'font-size': '16px'}\r\n        ),\r\n\r\n        # NMR Plot\r\n        html.Div([\r\n            dcc.Graph(id='nmr_plot', style={'margin': '0'}, config=config),\r\n        ], style={'width': '100%', 'margin': '0 auto'}),\r\n\r\n        # First and Last NMR Spectra Plot\r\n        html.Div([\r\n            html.H2(\"First and Last NMR Spectra\", style={'font-family': sans_serif_font, 'font-size': '18px', 'line-height': '1.5', 'padding': '10px', 'margin-top': '0'}),\r\n            dcc.Graph(id='first_last_spectrum_plot', style={'margin': '0'}, config=config),\r\n        ], style={'width': '100%', 'margin': '0 auto'}),\r\n\r\n        # Cycling data plot\r\n        html.Div([\r\n            html.H2(\"Battery Cycling Data\",\r\n                    style={'font-family': sans_serif_font, 'font-size': '18px', 'line-height': '1.5', 'padding': '10px',\r\n                           'margin-top': '0'}),\r\n            dcc.Graph(id='cycle_plot', style={'margin': '0'}, config=config),\r\n        ], style={'width': '100%', 'margin': '0 auto'}),\r\n\r\n        # FID Plot\r\n        html.Div([\r\n            html.H2(\"FID\", style={'font-family': sans_serif_font, 'font-size': '18px', 'line-height': '1.5', 'padding': '10px',\r\n                           'margin-top': '0'}),\r\n            dcc.Graph(id='fid_plot', style={'margin': '0'}, config=config),\r\n        ], style={'width': '100%', 'margin': '0 auto'}),\r\n\r\n        html.Div(id='dummy_div')\r\n    ], style={'max-width': '90%', 'margin': '0 auto'})\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/layout.py b/layout.py
--- a/layout.py	
+++ b/layout.py	
@@ -109,7 +109,7 @@
                 dcc.RadioItems(
                     id='time_plot',
                     options=[
-                        {'label': 'Timestamp', 'value': 'time'},
+                        {'label': 'Timestamp', 'value': 'timestamp'},
                         {'label': 'Absolute time', 'value': 'abs'}
                     ],
                     value='time',
Index: callbacks.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from dash.dependencies import Input, Output, State\r\nimport plotly.graph_objs as go\r\nfrom plotly.subplots import make_subplots\r\nimport data_processing\r\nimport utils\r\nimport os\r\nimport eclabfiles as ecf\r\nimport pandas as pd\r\nimport nmrglue as ng\r\nfrom datetime import datetime\r\nimport plotting\r\nimport dash\r\nfrom dash import callback_context\r\n\r\ndef register_callbacks(app):\r\n    @app.callback(\r\n        [Output('nmr_plot', 'figure'),\r\n         Output('first_last_spectrum_plot', 'figure'),\r\n         Output('fid_plot', 'figure'),\r\n         Output('cycle_plot', 'figure'),\r\n         Output('message_area', 'children'),],\r\n        [State('dummy_div', 'children'),\r\n         State('nmr_folder_input', 'value'),\r\n         State('voltage_folder_input', 'value'),\r\n         State('ppm_min_input', 'value'),\r\n         State('ppm_max_input', 'value'),\r\n         State('nmr_format_selector', 'value'),\r\n         State('nucleus_selector','value'),\r\n         State('data_selector', 'value'),\r\n         State('live_time_window_input', 'value'),\r\n         State('past_start_datetime', 'value'),\r\n         State('past_end_datetime','value'),\r\n         State('time_plot', 'value')],\r\n         [Input('update_button', 'n_clicks'),\r\n         Input('interval-component', 'n_intervals')\r\n         ],\r\n    )\r\n\r\n    def update_plots(_, nmr_folder, voltage_folder, ppm_min, ppm_max, format_type,\r\n                     nucleus, data_selector, live_time_window, past_start_datetime, past_end_datetime, time_plot, n_clicks, n_intervals):\r\n        ctx = callback_context\r\n\r\n        # Identify what triggered the callback\r\n        trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]\r\n\r\n        if not all([nmr_folder, voltage_folder, ppm_min, ppm_max, format_type, nucleus, data_selector, live_time_window,\r\n                    past_start_datetime, past_end_datetime]):\r\n            error_message = \"Incomplete or invalid input. Please check your inputs.\"\r\n            return go.Figure(), go.Figure(), go.Figure(), error_message\r\n\r\n        if ppm_min > ppm_max:\r\n            error_message = \"ppm min > ppm max, Choose a valid ppm range\"\r\n            return go.Figure(), go.Figure(), go.Figure(), error_message\r\n\r\n        try:\r\n            if trigger_id == 'update_button' or trigger_id == 'interval-component':\r\n                ppm_min, ppm_max = float(ppm_min), float(ppm_max)\r\n\r\n                if data_selector == 'live':\r\n                    end_datetime = utils.get_most_recent_time(nmr_folder)\r\n                    if end_datetime is None:\r\n                        raise ValueError(\"No NMR spectra found in the specified folder, or incorrect spectra naming (eg. 1H_20231101T000823.fid).\")\r\n                    start_datetime = end_datetime - utils.datetime.timedelta(hours=float(live_time_window))\r\n                elif data_selector == 'past':\r\n                    # Calculate past time range based on user input\r\n                    start_datetime = datetime.strptime(past_start_datetime, '%Y-%m-%d %H:%M')\r\n                    end_datetime = datetime.strptime(past_end_datetime, '%Y-%m-%d %H:%M')\r\n                elif data_selector != 'live' and data_selector != 'past':\r\n                    raise ValueError('dataselector: ', data_selector)\r\n\r\n                # Find NMR spectra in the calculated time range\r\n                spectra_paths = data_processing.find_spectra_in_range(nmr_folder, start_datetime, end_datetime, nucleus)\r\n                print(f'finding nmr spectra in time range: {start_datetime},{end_datetime}')\r\n                # Extract times for the first and last NMR spectra\r\n\r\n                nmr_times = [data_processing.extract_date_time(path) for path in spectra_paths]\r\n                nmr_start_time, nmr_end_time = min(nmr_times), max(nmr_times)\r\n\r\n                # Determine time format for plots\r\n                if time_plot == 'absolute':\r\n                    start_time = nmr_times[0]\r\n                    nmr_times = [(time - start_time).total_seconds() for time in nmr_times]\r\n                    time_axis_title = \"Time since start (s)\"\r\n                else:\r\n                    time_axis_title = \"Time\"\r\n\r\n                print('Plotting voltage trace')\r\n                eclab_df = data_processing.process_eclab(voltage_folder)\r\n                ec_v_df = eclab_df[1]\r\n                volt_df = data_processing.eclab_voltage(ec_v_df, start_datetime, end_datetime)\r\n\r\n                autophase_done = False\r\n                phase_params = (None, None)\r\n\r\n                heatmap_intensity = []\r\n                spectrum_runtime = []\r\n                ppm_values = None\r\n\r\n                for index, path in enumerate(spectra_paths):\r\n                    # Ensure correct argument passing. Adjust according to the updated function signature\r\n                    if not autophase_done:\r\n                        # For the first spectrum, apply autophasing\r\n                        dic, data, p0, p1, runtime, obs, sw, car = data_processing.process_nmr_data(\r\n                            path=path,\r\n                            nmr_format=format_type,\r\n                            apply_autophase=True,\r\n                            p0=0,\r\n                            p1=0\r\n                        )\r\n                        # Store phase parameters from the first spectrum for subsequent use\r\n                        phase_params = (p0, p1)\r\n                        autophase_done = True\r\n                    else:\r\n                        # For subsequent spectra, use stored phase parameters without autophasing\r\n                         dic, data, p0, p1, runtime, obs, sw, car = data_processing.process_nmr_data(\r\n                            path=path,\r\n                            nmr_format=format_type,\r\n                            apply_autophase=False,\r\n                            p0=phase_params[0],\r\n                            p1=phase_params[1]\r\n                        )\r\n\r\n                    spectrum_runtime.append(runtime)\r\n\r\n                    if ppm_values is None:\r\n                        uc = ng.pipe.make_uc(dic, data)\r\n                        ppm_values = uc.ppm_scale()\r\n\r\n                    intensity = data.real\r\n                    heatmap_intensity.append(intensity)\r\n\r\n                # Reduce the resolution for larger widths\r\n                if ppm_max - ppm_min > 55:\r\n                    reduction_factor = 10\r\n                    # Apply resolution reduction\r\n                    print('Applying resolution reduction')\r\n                    ppm_values = ppm_values[::reduction_factor]\r\n                    heatmap_intensity = [intensity[::reduction_factor] for intensity in heatmap_intensity]\r\n\r\n                # Find the indices for the desired ppm range\r\n                ppm_indices = [i for i, ppm in enumerate(ppm_values) if ppm_min <= ppm <= ppm_max]\r\n\r\n                # Filter the ppm values and intensities according to the indices\r\n                filtered_ppm_values = [ppm_values[i] for i in ppm_indices]\r\n                filtered_heatmap_intensity = [[intensity[i] for i in ppm_indices] for intensity in heatmap_intensity]\r\n                filtered_ppm_values = list(reversed(filtered_ppm_values))\r\n\r\n                # Create a subplot figure with 2 columns\r\n                fig = make_subplots(rows=1, cols=2, shared_yaxes=True, column_widths=[0.75, 0.25], horizontal_spacing=0.02)\r\n\r\n                fig_nmr_heatmap = plotting.create_nmr_heatmap(filtered_ppm_values, spectrum_runtime, filtered_heatmap_intensity,)\r\n                fig_voltage_trace = plotting.create_voltage_trace(volt_df)\r\n\r\n                fig.add_trace(fig_nmr_heatmap['data'][0], row=1, col=1)\r\n                fig.add_trace(fig_voltage_trace['data'][0], row=1, col=2)\r\n\r\n                fig.update_xaxes(title_text=\"Chemical Shift (ppm)\", row=1, col=1)\r\n                fig.update_yaxes(title_text=\"Time\", row=1, col=1)\r\n                fig.update_xaxes(title_text=\"Voltage\", row=1, col=2)\r\n\r\n                first_spectrum_path, last_spectrum_path = utils.find_first_last_spectra(nmr_folder, nucleus)\r\n\r\n                spectra_fig = plotting.create_spectra_fig(first_spectrum_path, last_spectrum_path, format_type, nmr_start_time, nmr_end_time)\r\n\r\n                fid_fig = plotting.create_3d_fid_plot(last_spectrum_path, format_type)\r\n\r\n                # Check if electrochemistry data directory is provided\r\n                if voltage_folder:\r\n                    try:\r\n                        # Generate electrochemical plot\r\n                        cycle_plot = plotting.plot_capacities_and_efficiency_eclab(voltage_folder)\r\n                    except Exception as e:\r\n                        print(f\"Error processing data or generating battery cycling plot: {e}\")\r\n                        cycle_plot = go.Figure()\r\n                else:\r\n                    cycle_plot = go.Figure()\r\n\r\n                return fig, spectra_fig, fid_fig, cycle_plot, \"\"\r\n            else:\r\n                print(\"Callback triggered by an unexpected source.\")\r\n                return go.Figure(), go.Figure(), go.Figure(), go.Figure(), \"\"\r\n\r\n        except Exception as e:\r\n            print(f\"Error in heatmap callback: {e}\")\r\n            return go.Figure(), go.Figure(), go.Figure(), go.Figure(), \"\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/callbacks.py b/callbacks.py
--- a/callbacks.py	
+++ b/callbacks.py	
@@ -75,14 +75,7 @@
 
                 nmr_times = [data_processing.extract_date_time(path) for path in spectra_paths]
                 nmr_start_time, nmr_end_time = min(nmr_times), max(nmr_times)
-
-                # Determine time format for plots
-                if time_plot == 'absolute':
-                    start_time = nmr_times[0]
-                    nmr_times = [(time - start_time).total_seconds() for time in nmr_times]
-                    time_axis_title = "Time since start (s)"
-                else:
-                    time_axis_title = "Time"
+                start_time = min(nmr_times)
 
                 print('Plotting voltage trace')
                 eclab_df = data_processing.process_eclab(voltage_folder)
@@ -148,8 +141,8 @@
                 # Create a subplot figure with 2 columns
                 fig = make_subplots(rows=1, cols=2, shared_yaxes=True, column_widths=[0.75, 0.25], horizontal_spacing=0.02)
 
-                fig_nmr_heatmap = plotting.create_nmr_heatmap(filtered_ppm_values, spectrum_runtime, filtered_heatmap_intensity,)
-                fig_voltage_trace = plotting.create_voltage_trace(volt_df)
+                fig_nmr_heatmap = plotting.create_nmr_heatmap(filtered_ppm_values, spectrum_runtime, filtered_heatmap_intensity,time_plot, start_time)
+                fig_voltage_trace = plotting.create_voltage_trace(volt_df, time_plot, start_time)
 
                 fig.add_trace(fig_nmr_heatmap['data'][0], row=1, col=1)
                 fig.add_trace(fig_voltage_trace['data'][0], row=1, col=2)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c46ea227-d559-4ffa-92c3-11a7b053a423\" name=\"Changes\" comment=\"use of mpr for timestamp isntead of mpl\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21-2-2024_09_28__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_28-2-2024_15_43_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_28-2-2024_15_43__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_3_5_2024_6_41_PM_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_3_5_2024_6_41_PM_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-2-2024_15_22_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-2-2024_15_22__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_3_5_2024_6_04_PM_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_3_5_2024_6_04_PM__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/callbacks.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/callbacks.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/layout.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/layout.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/plotting.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/plotting.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2caHVJsI5EWE20B5Exkt2hND228\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python.Unnamed.executor\": \"Run\",\r\n    \"Python.callbacks.executor\": \"Debug\",\r\n    \"Python.layout.executor\": \"Run\",\r\n    \"Python.main.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"abs-time\",\r\n    \"last_opened_file_path\": \"C:/Users/fionn/Desktop/AkkuSpin/venv1\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"AkkuSpin\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-50da183f06c8-2887949eec09-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.13135.95\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c46ea227-d559-4ffa-92c3-11a7b053a423\" name=\"Changes\" comment=\"\" />\r\n      <created>1708342798048</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1708342798048</updated>\r\n      <workItem from=\"1708342811169\" duration=\"4009000\" />\r\n      <workItem from=\"1709920893358\" duration=\"1000\" />\r\n      <workItem from=\"1712588980617\" duration=\"14000\" />\r\n      <workItem from=\"1713802331286\" duration=\"373000\" />\r\n      <workItem from=\"1713987446926\" duration=\"21000\" />\r\n      <workItem from=\"1714840095168\" duration=\"1241000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"finally rebased and working!\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1708384328769</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1708384328769</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Use old mpr fiole, when no mpl present.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1709659404942</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1709659404942</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"use of mpr for timestamp isntead of mpl\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1709660640977</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1709660640977</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"commit\" />\r\n    <MESSAGE value=\"finally rebased and working!\" />\r\n    <MESSAGE value=\"Use old mpr fiole, when no mpl present.\" />\r\n    <MESSAGE value=\"use of mpr for timestamp isntead of mpl\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"use of mpr for timestamp isntead of mpl\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/NMRVolt$app.coverage\" NAME=\"app Coverage Results\" MODIFIED=\"1704407230014\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/AkkuSpin$plotting.coverage\" NAME=\"plotting Coverage Results\" MODIFIED=\"1708383791569\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/NMRVolt$cap.coverage\" NAME=\"cap Coverage Results\" MODIFIED=\"1704410607546\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/AkkuSpin$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1714841291988\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/NMRVolt$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1704816725475\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/AkkuSpin$callbacks.coverage\" NAME=\"callbacks Coverage Results\" MODIFIED=\"1708384205204\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/AkkuSpin$layout.coverage\" NAME=\"layout Coverage Results\" MODIFIED=\"1708384113996\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,19 +4,8 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="c46ea227-d559-4ffa-92c3-11a7b053a423" name="Changes" comment="use of mpr for timestamp isntead of mpl">
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_21-2-2024_09_28__Changes_.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_28-2-2024_15_43_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_28-2-2024_15_43__Changes_.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_3_5_2024_6_41_PM_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_3_5_2024_6_41_PM_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-2-2024_15_22_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28-2-2024_15_22__Changes_.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_3_5_2024_6_04_PM_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_3_5_2024_6_04_PM__Changes_.xml" beforeDir="false" />
+    <list default="true" id="c46ea227-d559-4ffa-92c3-11a7b053a423" name="Changes" comment="Use old mpr fiole, when no mpl present.">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/callbacks.py" beforeDir="false" afterPath="$PROJECT_DIR$/callbacks.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/layout.py" beforeDir="false" afterPath="$PROJECT_DIR$/layout.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/plotting.py" beforeDir="false" afterPath="$PROJECT_DIR$/plotting.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -107,11 +96,6 @@
       <option name="presentableId" value="Default" />
       <updated>1708342798048</updated>
       <workItem from="1708342811169" duration="4009000" />
-      <workItem from="1709920893358" duration="1000" />
-      <workItem from="1712588980617" duration="14000" />
-      <workItem from="1713802331286" duration="373000" />
-      <workItem from="1713987446926" duration="21000" />
-      <workItem from="1714840095168" duration="1241000" />
     </task>
     <task id="LOCAL-00001" summary="finally rebased and working!">
       <option name="closed" value="true" />
@@ -129,15 +113,7 @@
       <option name="project" value="LOCAL" />
       <updated>1709659404942</updated>
     </task>
-    <task id="LOCAL-00003" summary="use of mpr for timestamp isntead of mpl">
-      <option name="closed" value="true" />
-      <created>1709660640977</created>
-      <option name="number" value="00003" />
-      <option name="presentableId" value="LOCAL-00003" />
-      <option name="project" value="LOCAL" />
-      <updated>1709660640977</updated>
-    </task>
-    <option name="localTasksCounter" value="4" />
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -158,14 +134,13 @@
     <MESSAGE value="commit" />
     <MESSAGE value="finally rebased and working!" />
     <MESSAGE value="Use old mpr fiole, when no mpl present." />
-    <MESSAGE value="use of mpr for timestamp isntead of mpl" />
-    <option name="LAST_COMMIT_MESSAGE" value="use of mpr for timestamp isntead of mpl" />
+    <option name="LAST_COMMIT_MESSAGE" value="Use old mpr fiole, when no mpl present." />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/NMRVolt$app.coverage" NAME="app Coverage Results" MODIFIED="1704407230014" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/AkkuSpin$plotting.coverage" NAME="plotting Coverage Results" MODIFIED="1708383791569" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/NMRVolt$cap.coverage" NAME="cap Coverage Results" MODIFIED="1704410607546" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/AkkuSpin$main.coverage" NAME="main Coverage Results" MODIFIED="1714841291988" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
+    <SUITE FILE_PATH="coverage/AkkuSpin$main.coverage" NAME="main Coverage Results" MODIFIED="1714841726406" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
     <SUITE FILE_PATH="coverage/NMRVolt$main.coverage" NAME="main Coverage Results" MODIFIED="1704816725475" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/AkkuSpin$callbacks.coverage" NAME="callbacks Coverage Results" MODIFIED="1708384205204" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/AkkuSpin$layout.coverage" NAME="layout Coverage Results" MODIFIED="1708384113996" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
